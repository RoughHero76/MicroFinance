import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
    View, Text, SectionList, StyleSheet, TouchableOpacity,
    ActivityIndicator, TextInput, Modal, Alert
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Picker } from '@react-native-picker/picker';
import { apiCall } from '../../../components/api/apiUtils';
import { showToast, CustomToast } from '../../../components/toast/CustomToast';

const RepaymentApprovalScreen = () => {
    const [state, setState] = useState({
        repayments: [],
        loading: false,
        approveLoading: false,
        page: 1,
        hasMore: true,
        showDatePicker: false,
        showFilters: false,
        collapsedSections: new Set(), // Track collapsed sections
        filters: {
            loanNumber: '',
            defaultDate: true,
            date: new Date(),
            status: ''
        }
    });


    const groupedRepayments = useMemo(() => {
        const grouped = state.repayments.reduce((acc, repayment) => {
            const collectorName = repayment.collectedBy || 'Unknown (Admin)';
            const date = new Date(repayment.paymentDate).toLocaleDateString();

            if (!acc[collectorName]) acc[collectorName] = {};
            if (!acc[collectorName][date]) acc[collectorName][date] = [];

            acc[collectorName][date].push(repayment);
            return acc;
        }, {});

        return Object.entries(grouped).map(([collector, dates]) => ({
            collector,
            data: Object.entries(dates).map(([date, items]) => ({
                date,
                items,
                totalAmount: items.reduce((sum, item) => sum + Number(item.amount), 0),
                count: items.length
            }))
        }));
    }, [state.repayments]);

    const fetchRepayments = useCallback(async () => {
        if (state.loading || !state.hasMore) return;

        setState(prev => ({ ...prev, loading: true }));
        try {
            const queryParams = new URLSearchParams({
                page: state.page,
                limit: 10,
                defaultDate: state.filters.defaultDate,
                date: state.filters.date.toISOString().split('T')[0],
                status: state.filters.status,
                ...(state.filters.loanNumber && { loanNumber: state.filters.loanNumber })
            });

            const response = await apiCall(`/api/admin/loan/repayment/history/approve?${queryParams}`, 'GET');

            if (response.status === 'success' && Array.isArray(response.data)) {
                setState(prev => ({
                    ...prev,
                    repayments: [...prev.repayments, ...response.data],
                    hasMore: response.data.length === 10,
                    page: prev.page + 1,
                    loading: false
                }));
            }
        } catch (error) {
            showToast('error', 'Failed to fetch repayments');
            setState(prev => ({ ...prev, loading: false }));
        }
    }, [state.page, state.filters, state.loading, state.hasMore]);

    useEffect(() => { fetchRepayments(); }, [fetchRepayments]);

    const toggleSection = (collectorName) => {
        setState(prev => {
            const newCollapsed = new Set(prev.collapsedSections);
            if (newCollapsed.has(collectorName)) {
                newCollapsed.delete(collectorName);
            } else {
                newCollapsed.add(collectorName);
            }
            return { ...prev, collapsedSections: newCollapsed };
        });
    };

    const handleAction = async (repaymentId, action) => {
        const confirmMessage = action === 'approve'
            ? 'Are you sure you want to approve this repayment?'
            : 'Are you sure you want to reject this repayment?';

        Alert.alert(
            `Confirm ${action.charAt(0).toUpperCase() + action.slice(1)}`,
            confirmMessage,
            [
                { text: 'Cancel', style: 'cancel' },
                {
                    text: action.charAt(0).toUpperCase() + action.slice(1),
                    onPress: async () => {
                        setState(prev => ({ ...prev, approveLoading: true }));
                        try {
                            const endpoint = action === 'approve' ? 'approve' : 'reject';
                            const response = await apiCall(`/api/admin/loan/repayment/history/${endpoint}`, 'POST', { repaymentId });

                            if (response.status === 'success') {
                                showToast('success', `Repayment ${action}ed successfully`);
                                setState(prev => ({
                                    ...prev,
                                    repayments: [],
                                    page: 1,
                                    hasMore: true
                                }));
                                fetchRepayments();
                            }
                        } catch (error) {
                            showToast('error', `Failed to ${action} repayment`);
                        } finally {
                            setState(prev => ({ ...prev, approveLoading: false }));
                        }
                    }
                }
            ]
        );
    };

    const renderRepayment = useCallback(({ item }) => (
        <View style={styles.repaymentCard}>
            <View style={styles.repaymentHeader}>
                <Text style={styles.amount}>₹{Number(item.amount).toLocaleString()}</Text>
                <Text style={[styles.status, { color: getStatusColor(item.status) }]}>
                    {item.status}
                </Text>
            </View>

            <View style={styles.details}>
                <DetailRow key="method" icon="credit-card" label="Method" value={item.paymentMethod} />
                <DetailRow key="remaining" icon="cash" label="Remaining" value={`₹${item.loan?.outstandingAmount}`} />
                <DetailRow key="borrower" icon="account" label="Borrower" value={item.loanDetails.borrower} />
                <DetailRow key="loanAmount" icon="bank" label="Loan Amount" value={`₹${item.loanDetails.loanAmount}`} />
                <DetailRow key="transaction" icon="note" label="Transaction" value={item.transactionId || 'N/A'} />
                <DetailRow key="note" icon="text" label="Note" value={item.logicNote || item.LogicNote || 'N/A'} />
            </View>

            {item.status !== 'Approved' && (
                <View style={styles.actions}>
                    <TouchableOpacity
                        style={[styles.actionButton, styles.rejectButton]}
                        onPress={() => handleAction(item._id, 'reject')}
                        disabled={state.approveLoading}
                    >
                        <Icon name="close-circle-outline" size={20} color="#FFFFFF" />
                        <Text style={styles.actionText}>Reject</Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.actionButton, styles.approveButton]}
                        onPress={() => handleAction(item._id, 'approve')}
                        disabled={state.approveLoading}
                    >
                        <Icon name="check-circle-outline" size={20} color="#FFFFFF" />
                        <Text style={styles.actionText}>Approve</Text>
                    </TouchableOpacity>
                </View>
            )}
        </View>
    ), [state.approveLoading, handleAction]);

    const renderSectionHeader = ({ section }) => (
        <TouchableOpacity
            style={styles.collectorSection}
            onPress={() => toggleSection(section.collector)}
        >
            <View style={styles.collectorHeader}>
                <View style={styles.collectorTitleContainer}>
                    <Text style={styles.collectorName}>{section.collector}</Text>
                    <Icon
                        name={state.collapsedSections.has(section.collector) ? 'chevron-down' : 'chevron-up'}
                        size={24}
                        color="#6200EE"
                    />
                </View>
                {!state.collapsedSections.has(section.collector) && (
                    <View style={styles.collectorSummary}>
                        <Text style={styles.summaryText}>
                            Collections: {section.data.reduce((sum, date) => sum + date.count, 0)}
                        </Text>
                        <Text style={styles.summaryText}>
                            Total: ₹{section.data.reduce((sum, date) => sum + date.totalAmount, 0).toLocaleString()}
                        </Text>
                    </View>
                )}
            </View>
        </TouchableOpacity>
    );

    const DetailRow = ({ icon, label, value }) => (
        <View style={styles.detailRow}>
            <Icon name={icon} size={16} color="#666666" />
            <Text style={styles.detailLabel}>{label}:</Text>
            <Text style={styles.detailValue}>{value}</Text>
        </View>
    );

    return (
        <View style={styles.container}>
            <TouchableOpacity
                style={styles.filterButton}
                onPress={() => setState(prev => ({ ...prev, showFilters: true }))}
            >
                <Icon name="filter-variant" size={24} color="#6200EE" />
                <Text style={styles.filterButtonText}>Filters</Text>
            </TouchableOpacity>

            <SectionList
                sections={groupedRepayments}
                renderItem={({ item, section }) => (
                    !state.collapsedSections.has(section.collector) && (
                        <View style={styles.dateSection} key={`${section.collector}-${item.date}`}>
                            <View style={styles.dateSectionHeader}>
                                <Text style={styles.dateText}>{item.date}</Text>
                                <View>
                                    <Text style={styles.summaryText}>
                                        Total: ₹{item.totalAmount.toLocaleString()}
                                    </Text>
                                    <Text style={styles.summaryText}>
                                        Collections: {item.count}
                                    </Text>
                                </View>
                            </View>
                            {item.items.map((repayment) => (
                                <View key={repayment._id || `${repayment.transactionId}-${repayment.amount}`}>
                                    {renderRepayment({ item: repayment })}
                                </View>
                            ))}
                        </View>
                    )
                )}
                renderSectionHeader={renderSectionHeader}
                keyExtractor={(item, index) => `${item.date}-${index}`}
                onEndReached={fetchRepayments}
                onEndReachedThreshold={0.1}
                ListFooterComponent={state.loading && <ActivityIndicator size="large" color="#6200EE" />}
                ListEmptyComponent={!state.loading && (
                    <Text style={styles.emptyText}>No repayments to approve</Text>
                )}
                stickySectionHeadersEnabled
            />
            <Modal
                visible={state.showFilters}
                animationType="slide"
                transparent
                onRequestClose={() => setState(prev => ({ ...prev, showFilters: false }))}
            >
                <View style={styles.modalOverlay}>
                    <View style={styles.modalContent}>
                        <Text style={styles.modalTitle}>Filters</Text>

                        <TextInput
                            style={styles.input}
                            placeholder="Loan Number (optional)"
                            value={state.filters.loanNumber}
                            placeholderTextColor="#666666"
                            onChangeText={(loanNumber) => setState(prev => ({
                                ...prev,
                                filters: { ...prev.filters, loanNumber }
                            }))}
                        />

                        <View style={styles.toggleContainer}>
                            <Text style={styles.toggleLabel}>Use Default Date</Text>
                            <TouchableOpacity
                                style={[
                                    styles.toggle,
                                    state.filters.defaultDate && styles.toggleActive
                                ]}
                                onPress={() => setState(prev => ({
                                    ...prev,
                                    filters: { ...prev.filters, defaultDate: !prev.filters.defaultDate }
                                }))}
                            >
                                <View style={[
                                    styles.toggleHandle,
                                    state.filters.defaultDate && styles.toggleHandleActive
                                ]} />
                            </TouchableOpacity>
                        </View>

                        {!state.filters.defaultDate && (
                            <TouchableOpacity
                                style={styles.dateButton}
                                onPress={() => setState(prev => ({ ...prev, showDatePicker: true }))}
                            >
                                <Icon name="calendar" size={20} color="#6200EE" />
                                <Text style={styles.dateButtonText}>
                                    {state.filters.date.toLocaleDateString()}
                                </Text>
                            </TouchableOpacity>
                        )}

                        <Picker
                            selectedValue={state.filters.status}
                            onValueChange={(status) => setState(prev => ({
                                ...prev,
                                filters: { ...prev.filters, status }
                            }))}
                            style={styles.picker}
                        >
                            <Picker.Item label="All Statuses" value="" />
                            <Picker.Item label="Pending" value="Pending" />
                            <Picker.Item label="Approved" value="Approved" />
                        </Picker>

                        <TouchableOpacity
                            style={styles.applyButton}
                            onPress={() => {
                                setState(prev => ({
                                    ...prev,
                                    showFilters: false,
                                    repayments: [],
                                    page: 1,
                                    hasMore: true
                                }));
                                fetchRepayments();
                            }}
                        >
                            <Text style={styles.applyButtonText}>Apply Filters</Text>
                        </TouchableOpacity>
                    </View>
                </View>
            </Modal>

            {state.showDatePicker && (
                <DateTimePicker
                    value={state.filters.date}
                    mode="date"
                    display="default"
                    onChange={(_, selectedDate) => {
                        setState(prev => ({
                            ...prev,
                            showDatePicker: false,
                            filters: {
                                ...prev.filters,
                                date: selectedDate || prev.filters.date
                            }
                        }));
                    }}
                />
            )}

            <CustomToast />
        </View>
    );
};

const getStatusColor = (status) => ({
    'Approved': '#4CAF50',
    'Pending': '#FFA000'
}[status] || '#757575');

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#F5F5F5',
        padding: 16
    },
    collectorHeader: {
        width: '100%',
    },
    collectorTitleContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 8,
    },
    collectorSection: {
        backgroundColor: '#FFFFFF',
        padding: 16,
        borderRadius: 12,
        marginBottom: 8,
        elevation: 2,
    },
    filterButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#FFFFFF',
        padding: 12,
        borderRadius: 12,
        marginBottom: 16,
        elevation: 2
    },
    filterButtonText: {
        marginLeft: 8,
        color: '#6200EE',
        fontWeight: '600'
    },
    collectorSection: {
        backgroundColor: '#FFFFFF',
        padding: 16,
        borderRadius: 12,
        marginBottom: 8,
        elevation: 2
    },
    collectorName: {
        fontSize: 18,
        fontWeight: '700',
        color: '#000000',
        marginBottom: 8
    },
    collectorSummary: {
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    dateSection: {
        backgroundColor: '#FFFFFF',
        borderRadius: 12,
        padding: 16,
        marginBottom: 16,
        elevation: 2
    },
    dateSectionHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 16
    },
    dateText: {
        fontSize: 16,
        fontWeight: '600',
        color: '#6200EE'
    },
    summaryText: {
        fontSize: 14,
        color: '#666666',
        marginBottom: 4
    },
    repaymentCard: {
        backgroundColor: '#FFFFFF',
        borderRadius: 12,
        padding: 16,
        marginBottom: 12,
        elevation: 3
    },
    repaymentHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12
    },
    amount: {
        fontSize: 20,
        fontWeight: '700',
        color: '#000000'
    },
    status: {
        fontSize: 14,
        fontWeight: '600',
        padding: 6,
        borderRadius: 6,
        overflow: 'hidden'
    },
    details: {
        marginTop: 8
    },
    detailRow: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 8
    },
    detailLabel: {
        marginLeft: 8,
        color: '#666666',
        width: 80
    },
    detailValue: {
        flex: 1,
        color: '#000000'
    },
    actions: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginTop: 16
    },
    actionButton: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        padding: 12,
        borderRadius: 8,
        flex: 0.48
    },
    actionText: {
        color: '#FFFFFF',
        marginLeft: 8,
        fontWeight: '600'
    },
    approveButton: {
        backgroundColor: '#4CAF50'
    },
    rejectButton: {
        backgroundColor: '#FF5252'
    },
    modalOverlay: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        justifyContent: 'flex-end'
    },
    modalContent: {
        backgroundColor: '#FFFFFF',
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        padding: 24,
        maxHeight: '80%'
    },
    modalTitle: {
        fontSize: 20,
        fontWeight: '700',
        color: '#000000',
        marginBottom: 24
    },
    input: {
        backgroundColor: '#F5F5F5',
        borderRadius: 8,
        padding: 12,
        marginBottom: 16,
        color: '#000000'
    },
    toggleContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        marginBottom: 16
    },
    toggleLabel: {
        fontSize: 16,
        color: '#000000'
    },
    toggle: {
        width: 50,
        height: 28,
        borderRadius: 14,
        backgroundColor: '#E0E0E0',
        padding: 2,
        justifyContent: 'center'
    },
    toggleActive: {
        backgroundColor: '#6200EE'
    },
    toggleHandle: {
        width: 24,
        height: 24,
        borderRadius: 12,
        backgroundColor: '#FFFFFF',
        elevation: 2
    },
    toggleHandleActive: {
        transform: [{ translateX: 22 }]
    },
    dateButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#F5F5F5',
        padding: 12,
        borderRadius: 8,
        marginBottom: 16
    },
    dateButtonText: {
        marginLeft: 8,
        color: '#000000',
        fontSize: 16
    },
    picker: {
        backgroundColor: '#F5F5F5',
        marginBottom: 16,
        borderRadius: 8
    },
    applyButton: {
        backgroundColor: '#6200EE',
        padding: 16,
        borderRadius: 8,
        alignItems: 'center'
    },
    applyButtonText: {
        color: '#FFFFFF',
        fontSize: 16,
        fontWeight: '600'
    },
    emptyText: {
        textAlign: 'center',
        color: '#666666',
        fontSize: 16,
        marginTop: 24
    }
});

export default RepaymentApprovalScreen;